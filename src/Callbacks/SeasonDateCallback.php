<?php
/**
 * @author         Ni Irrty <niirrty+code@gmail.com>
 * @copyright  (c) 2017, Ni Irrty
 * @license        MIT
 * @since          2018-05-08
 * @version        0.1.0
 */


declare( strict_types = 1 );


namespace Niirrty\Holiday\Callbacks;


use Niirrty\ArgumentException;
use Niirrty\Date\DateTime;


/**
 * @package Niirrty\Holiday\Callbacks
 */
class SeasonDateCallback implements IDynamicDateCallback
{


   private const SPRING_DAYS = [ 1500 => 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 9, 10, 10, 9, 9, 10, 10, 9, 9, 10, 10, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 20, 20, 20, 19, 19, 20, 20, 19, 19, 20, 20, 19, 19, 20, 20, 19, 19, 20, 20, 19, 19, 20, 20, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 20, 20, 20 ];
   private const SUMMER_DAYS = [ 1500 => 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 21, 22, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 21, 21, 21, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 20, 20, 20, 21, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21 ];
   private const AUTUMN_DAYS = [ 1500 => 13, 13, 14, 14, 13, 13, 14, 14, 13, 13, 14, 14, 13, 13, 14, 14, 13, 13, 14, 14, 13, 13, 14, 14, 13, 13, 14, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 13, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 23, 23, 24, 24, 23, 23, 24, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 23, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22, 23, 23, 22, 22 ];
   private const WINTER_DAYS = [ 1500 => 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 12, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 12, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 21, 22, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 20, 21, 21, 21, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 22, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21, 22, 22, 21, 21 ];


   /**
    * The differences in seconds, of the different season starts and usable Hemispheres
    */
   private const DIFFS = [
      self::TYPE_SPRING => [
         self::HEMISPHERE_NORTH => 31556942,
         self::HEMISPHERE_SOUTH => 31556911
      ],
      self::TYPE_SUMMER => [
         self::HEMISPHERE_NORTH => 31556877,
         self::HEMISPHERE_SOUTH => 31556973
      ],
      self::TYPE_AUTUMN => [
         self::HEMISPHERE_NORTH => 31556911,
         self::HEMISPHERE_SOUTH => 31556942
      ],
      self::TYPE_WINTER => [
         self::HEMISPHERE_NORTH => 31556973,
         self::HEMISPHERE_SOUTH => 31556877
      ]
   ];

   /**
    * The known reference dates for year ranges 1700-1899 and 1900-2099
    */
   private const REFERENCES = [
      'spring' => [
         'north' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-03-21 00:57:00 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-03-20 11:33:19 UTC' ]
         ],
         'south' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-09-23 11:22:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-09-22 22:16:34 UTC' ]
         ]
      ],
      'summer' => [
         'north' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-06-21 21:42:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-06-21 06:39:11 UTC' ]
         ],
         'south' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-12-21 05:06:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-12-21 18:34:51 UTC' ]
         ]
      ],
      'autumn' => [
         'north' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-09-23 11:22:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-09-22 22:16:34 UTC' ]
         ],
         'south' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-03-21 00:57:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-03-20 11:33:19 UTC' ]
         ]
      ],
      'winter' => [
         'north' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-12-21 05:06:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-12-21 18:34:51 UTC' ]
         ],
         'south' => [
            [ 'min-year' => 1700, 'max-year' => 1899, 'date' => '1805-06-21 21:42:30 UTC' ],
            [ 'min-year' => 1900, 'max-year' => 2099, 'date' => '2005-06-21 06:39:11 UTC' ]
         ]
      ]
   ];

   /**
    * Default month and day for years, not covered by the REFERENCES list.
    */
   private const DEFAULTS   = [
      self::TYPE_SPRING => [
         self::HEMISPHERE_NORTH => '-03-21 12:00:00 UTC',
         self::HEMISPHERE_SOUTH => '-09-22 12:00:00 UTC'
      ],
      self::TYPE_SUMMER => [
         self::HEMISPHERE_NORTH => '-06-21 12:00:00 UTC',
         self::HEMISPHERE_SOUTH => '-12-21 12:00:00 UTC'
      ],
      self::TYPE_AUTUMN => [
         self::HEMISPHERE_NORTH => '-09-22 12:00:00 UTC',
         self::HEMISPHERE_SOUTH => '-03-20 12:00:00 UTC'
      ],
      self::TYPE_WINTER => [
         self::HEMISPHERE_NORTH => '-12-21 12:00:00 UTC',
         self::HEMISPHERE_SOUTH => '-06-21 12:00:00 UTC'
      ]
   ];

   /**
    * The spring season type.
    */
   public const TYPE_SPRING = 'spring';

   /**
    * The summer season type.
    */
   public const TYPE_SUMMER = 'summer';

   /**
    * The autumn season type.
    */
   public const TYPE_AUTUMN = 'autumn';

   /**
    * The winter season type.
    */
   public const TYPE_WINTER = 'winter';

   /**
    * All known season types.
    */
   public const KNOWN_TYPES = [ self::TYPE_SPRING, self::TYPE_SUMMER, self::TYPE_AUTUMN, self::TYPE_WINTER ];

   /**
    * The northern hemisphere
    */
   public const HEMISPHERE_NORTH = 'north';

   /**
    * The south hemisphere
    */
   public const HEMISPHERE_SOUTH = 'south';

   /**
    * All known hemispheres.
    */
   public const KNOWN_HEMISPHERES = [ self::HEMISPHERE_NORTH, self::HEMISPHERE_SOUTH ];


   /**
    * The season type (see ::TYPE_* class constants)
    *
    * @type string
    */
   protected $_type;

   /**
    * The hemisphere (see ::HEMISPHERE_* class constants)
    *
    * @type string
    */
   protected $_hemisphere;


   /**
    * SeasonDateCallback constructor.
    *
    * @param string $type       The season type (see ::TYPE_* class constants)
    * @param string $hemisphere The hemisphere (see ::HEMISPHERE_* class constants)
    * @throws \Niirrty\ArgumentException
    */
   public function __construct( string $type, string $hemisphere )
   {

      if ( ! \in_array( $type, self::KNOWN_TYPES ) )
      {
         throw new ArgumentException( 'type', $type, 'Unknown season type.' );
      }
      if ( ! \in_array( $hemisphere, self::KNOWN_HEMISPHERES ) )
      {
         throw new ArgumentException( 'hemisphere', $hemisphere, 'Unknown hemisphere.' );
      }

      $this->_type       = $type;
      $this->_hemisphere = $hemisphere;

   }


   /**
    * Calculate the holiday datetime for defined year and returns it.
    *
    * @param  int $year
    * @return \DateTime
    */
   public function calculate( int $year ) : \DateTime
   {

      if ( self::HEMISPHERE_NORTH === $this->_hemisphere && $year > 1499 && $year < 2150 )
      {
         switch ( $this->_type )
         {
            case self::TYPE_SPRING:
               return new DateTime( $year . '-03-' . self::SPRING_DAYS[ $year ] . ' 00:00:00 UTC' );
            case self::TYPE_SUMMER:
               return new DateTime( $year . '-06-' . self::SUMMER_DAYS[ $year ] . ' 00:00:00 UTC' );
            case self::TYPE_AUTUMN:
               return new DateTime( $year . '-09-' . self::AUTUMN_DAYS[ $year ] . ' 00:00:00 UTC' );
            #case self::TYPE_WINTER:
            default:
               return new DateTime( $year . '-12-' . self::WINTER_DAYS[ $year ] . ' 00:00:00 UTC' );
         }
      }

      $foundIdx = -1;
      $idx      = 0;

      // Search the index of the reference date that covers the defined year
      foreach ( self::REFERENCES[ $this->_type ][ $this->_hemisphere ] as $reference )
      {
         if ( 0 > $foundIdx && $reference[ 'min-year' ] <= $year && $reference[ 'max-year' ] >= $year )
         {
            $foundIdx = $idx;
            break;
         }
         $idx++;
      }

      if ( $foundIdx < 0 )
      {
         // There is no calculation available for defined year => use the static default date
         return new DateTime( $year . self::DEFAULTS[ $this->_type ][ $this->_hemisphere ] );
      }

      // The reference date was found => Init it as DateTime instance
      $refDate   = new DateTime( self::REFERENCES[ $this->_type ][ $this->_hemisphere ][ $foundIdx ][ 'date' ] );

      // Calculate the difference in year (can be also negative!)
      $diffYears = $year - $refDate->year;

      if ( 0 !== $diffYears )
      {
         $refDate->addSeconds( $diffYears * self::DIFFS[ $this->_type ][ $this->_hemisphere ] );
      }

      return $refDate;

   }

}

